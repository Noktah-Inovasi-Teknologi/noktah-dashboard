services:
  #Main Nuxt Application (Development)
  nuxt-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nuxt-app-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - .:/app
      - /app/node_modules
      - ./data/uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - dashboard-networks-dev

  # Workflow Orchestration (Development)
  prefect:
    build:
      context: ./service/prefect
      dockerfile: Dockerfile
    container_name: prefect-dev
    restart: unless-stopped
    ports:
      - "4200:4200"
    environment:
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_SERVER_API_PORT=4200
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PREFECT_LOGGING_LEVEL=DEBUG
    volumes:
      - ./service/prefect:/app
    depends_on:
      - postgres
      - redis
    networks:
      - dashboard-networks-dev
  
  # Database (Development)
  postgres:
    image: postgres:15.14-alpine
    container_name: postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dashboard-networks-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache and Queues (Development)
  redis:
    image: redis:alpine
    container_name: redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1000
    volumes:
      - redis_data_dev:/data
    networks:
      - dashboard-networks-dev
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CrewAI Service (Development)
  crewai:
    build:
      context: ./service/crewai
      dockerfile: Dockerfile
    container_name: crewai-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - ENVIRONMENT=development
    volumes:
      - ./service/crewai:/app
    depends_on:
      - postgres
      - redis
    networks:
      - dashboard-networks-dev

volumes:
  postgres_data_dev:
  redis_data_dev:

networks:
  dashboard-networks-dev:
    driver: bridge