
services:
  #Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - nuxt-app
    networks:
      - dashboard-networks
    
  #Main Nuxt Application
  nuxt-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nuxt-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./data/uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - dashboard-networks

  # Workflow Orchestration
  prefect:
    build:
      context: ./service/prefect
      dockerfile: Dockerfile
    container_name: prefect
    restart: unless-stopped
    ports:
      - "4200:4200"
    env_file:
      - .env
    environment:
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_SERVER_API_PORT=4200
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB_PREFECT}
      - PREFECT_LOGGING_LEVEL=DEBUG
      - PREFECT_API_URL=http://localhost:4200/api
      - PREFECT_UI_API_URL=http://localhost:4200/api
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REFRESH_TOKEN=${GOOGLE_REFRESH_TOKEN}
    volumes:
      - ./service/prefect:/app
    depends_on:
      - postgres
      - redis
    networks:
      - dashboard-networks
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1G"

  # CrewAI Service
  # crewai:
  #   build:
  #     context: ./service/crewai
  #     dockerfile: Dockerfile
  #   container_name: crewai
  #   restart: unless-stopped
  #   ports:
  #     - "8000:8000"
  #   env_file:
  #     - .env
  #   environment:
  #     - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  #     - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
  #     - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
  #     - ENVIRONMENT=production
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - dashboard-networks
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "1.0"
  #         memory: "2G"
  
  # Database
  postgres:
    image: postgres:15.14-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_DB_DEV=${POSTGRES_DB_DEV}
      - POSTGRES_DB_PREFECT=${POSTGRES_DB_PREFECT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dashboard-networks
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "4G"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Cache and Queues
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1000
    volumes:
      - redis_data:/data
    networks:
      - dashboard-networks
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 20s
      timeout: 10s
      retries: 5
  
  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    env_file:
      - .env
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - dashboard-networks
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - dashboard-networks
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"

  # Logging
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    env_file:
      - .env
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    networks:
      - dashboard-networks
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./logs:/var/log:ro
      - ./config/promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - dashboard-networks
    depends_on:
      - loki

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    env_file:
      - .env
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./config/cloudflare/config.yml:/etc/cloudflared/config.yml:ro
      - ./config/cloudflare/credentials.json:/etc/cloudflared/credentials.json:ro
      - ./config/cloudflare/cert.pem:/etc/cloudflared/cert.pem:ro
    depends_on:
      - nuxt-app
    networks:
      - dashboard-networks

  # Backup Service
  backup-service:
    build:
      context: ./service/backup
      dockerfile: Dockerfile
    container_name: backup-service
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_DRIVE_FOLDER_ID=${GOOGLE_DRIVE_FOLDER_ID}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
    volumes:
      - ./secrets:/secrets:ro
      - ./data/backups:/backups
      - postgres_data:/backup-source/postgres:ro
      - redis_data:/backup-source/redis:ro
    depends_on:
      - postgres
      - redis
    networks:
      - dashboard-networks

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  dashboard-networks:
    driver: bridge
  
  
  